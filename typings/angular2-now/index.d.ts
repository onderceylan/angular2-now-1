// Generated by typings
// Source: https://raw.githubusercontent.com/onderceylan/angular2-now/e22d64ef073c7a460ca75225090b42371fde002c/angular2-now.d.ts
declare module 'angular2-now' {
    export function init();

    export function options(config: options);
    
    export function Component(config: ComponentConfig): ClassDecorator;

    export function Service(config: ServiceConfig|string): ClassDecorator;

    export function Filter(config: FilterConfig|string): ClassDecorator;

    export function State(config: StateConfig): ClassDecorator;

    export function View(config: ViewConfig|string): ClassDecorator;

    export function bootstrap(appName: any, dependencies?: string[]);

    export function SetModule(appName: string, dependencies?: string[]);

    export function Inject(dependencies: string[]);

    export function MeteorMethod(config?: options);

    interface options {
        controllerAs?: string;
        spinner?: any;
        events?: any;
        noConflict?: boolean;
    }

    interface ServiceConfig {
        name: string;
    }

    interface StateConfig {
        name: string; // 'stateName'
        url?: string; // '/stateurl'
        defaultRoute?: boolean|string; // true/false or '/default/route/url'
        abstract?: boolean;
        html5Mode?: boolean;
        params?: any; // { id: 123 },  // default params, see ui-router docs
        data?: any; // { a: 1, b: 2},  // custom data
        resolve?: any;
        controller?: ControllerClass;
        template?: any; // '<div></div>'
        templateUrl?: string; //  'client/app/app.html'
        templateProvider?: Function; // function() { return "<h1>content</h1>"; }
    }

    interface ViewConfig {
        template?: string;
        templateUrl?: string;
        transclude?: boolean;
    }

    interface ComponentConfig {
        selector: string; // 'my-app'
        template?: any; // '<div>Inline template</div>'
        templateUrl?: string; // 'path/to/the_template.html'
        bind?: Bind; // { twoWay: '=', value: '@', function: '&' },
        providers?: string[];
        replace?: boolean;
        transclude?: boolean;
        scope?: undefined|boolean|Bind;
    }

    interface Bind {
        [id: string]: any;
    }

    interface FilterConfig {
        name: string;
    }

    interface ControllerClass extends Function {
        template?: string|Function;
        templateUrl?: string|Function;
        link?: Function;
        compile?: any;
    }
}